package main

cnpg: {
	description: "Config a Cloud Native Postgresql"
	type:        "component"
	attributes: workload: type: "autodetects.core.oam.dev"
}
template: {
	parameter: {
		name:             string
		instances?:       *1 | int
		imageName?:       *"postgres:15" | string
		storageClass?:    string
		storageSize?:     *"1Gi" | string
		backupPath?:      string
		initDatabase?:    *"app" | string
		enableSuperuser?: *false | bool
		resources?: {
			requests?: {
				memory?: *"256Mi" | string
				cpu?:    *"250m" | string
			}
			limits?: {
				memory?: *"1Gi" | string
				cpu?:    *"1" | string
			}
		}
	}
	output: {
		apiVersion: "postgresql.cnpg.io/v1"
		kind:       "Cluster"
		metadata: {
			name:      parameter.name
			namespace: context.namespace
		}
		spec: {
			instances: parameter.instances
			if parameter.imageName != _|_ {
				imageName: parameter.imageName
			}
			postgresql: {
				parameters: {
					max_connections: "200"
					shared_buffers:  "256MB"
					effective_cache_size: "1GB"
				}
			}
			bootstrap: {
				initdb: {
					database: parameter.initDatabase
					owner:    parameter.initDatabase
					secret: {
						name: "\(parameter.name)-app"
					}
					if parameter.enableSuperuser {
						superuser: "postgres"
					}
				}
			}
			storage: {
				size:         parameter.storageSize
				if parameter.storageClass != _|_ {
					storageClass: parameter.storageClass
				}
			}
			if parameter.resources != _|_ {
				resources: parameter.resources
			}
			if parameter.backupPath != _|_ {
				backup: {
					target: "primary"
					retentionPolicy: "30d"
					barmanObjectStore: {
						destinationPath: parameter.backupPath
						s3Credentials: {
							accessKeyId: {
								name: "\(parameter.name)-backup-creds"
								key:  "ACCESS_KEY_ID"
							}
							secretAccessKey: {
								name: "\(parameter.name)-backup-creds"
								key:  "SECRET_ACCESS_KEY"
							}
						}
					}
				}
			}
		}
	}
	outputs: {
		connectionSecret: {
			apiVersion: "v1"
			kind:       "Secret"
			metadata: {
				name:      "\(parameter.name)-app"
				namespace: context.namespace
			}
			stringData: {
				username: parameter.initDatabase
				password: "" // Generated automatically by CNPG
				host:     "\(parameter.name)-rw"
				port:     "5432"
				dbname:   parameter.initDatabase
				uri:      "postgres://\(parameter.initDatabase):<auto-generated>@\(parameter.name)-rw:5432/\(parameter.initDatabase)?sslmode=require"
			}
		}
	}
}