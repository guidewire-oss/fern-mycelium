// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/guidewire-oss/fern-mycelium/internal/gql"
	"github.com/guidewire-oss/fern-mycelium/pkg/repo"
)

type FakeFlakyTestProvider struct {
	GetFlakyTestsStub        func(context.Context, string, int) ([]*gql.FlakyTest, error)
	getFlakyTestsMutex       sync.RWMutex
	getFlakyTestsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int
	}
	getFlakyTestsReturns struct {
		result1 []*gql.FlakyTest
		result2 error
	}
	getFlakyTestsReturnsOnCall map[int]struct {
		result1 []*gql.FlakyTest
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFlakyTestProvider) GetFlakyTests(arg1 context.Context, arg2 string, arg3 int) ([]*gql.FlakyTest, error) {
	fake.getFlakyTestsMutex.Lock()
	ret, specificReturn := fake.getFlakyTestsReturnsOnCall[len(fake.getFlakyTestsArgsForCall)]
	fake.getFlakyTestsArgsForCall = append(fake.getFlakyTestsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.GetFlakyTestsStub
	fakeReturns := fake.getFlakyTestsReturns
	fake.recordInvocation("GetFlakyTests", []interface{}{arg1, arg2, arg3})
	fake.getFlakyTestsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFlakyTestProvider) GetFlakyTestsCallCount() int {
	fake.getFlakyTestsMutex.RLock()
	defer fake.getFlakyTestsMutex.RUnlock()
	return len(fake.getFlakyTestsArgsForCall)
}

func (fake *FakeFlakyTestProvider) GetFlakyTestsCalls(stub func(context.Context, string, int) ([]*gql.FlakyTest, error)) {
	fake.getFlakyTestsMutex.Lock()
	defer fake.getFlakyTestsMutex.Unlock()
	fake.GetFlakyTestsStub = stub
}

func (fake *FakeFlakyTestProvider) GetFlakyTestsArgsForCall(i int) (context.Context, string, int) {
	fake.getFlakyTestsMutex.RLock()
	defer fake.getFlakyTestsMutex.RUnlock()
	argsForCall := fake.getFlakyTestsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeFlakyTestProvider) GetFlakyTestsReturns(result1 []*gql.FlakyTest, result2 error) {
	fake.getFlakyTestsMutex.Lock()
	defer fake.getFlakyTestsMutex.Unlock()
	fake.GetFlakyTestsStub = nil
	fake.getFlakyTestsReturns = struct {
		result1 []*gql.FlakyTest
		result2 error
	}{result1, result2}
}

func (fake *FakeFlakyTestProvider) GetFlakyTestsReturnsOnCall(i int, result1 []*gql.FlakyTest, result2 error) {
	fake.getFlakyTestsMutex.Lock()
	defer fake.getFlakyTestsMutex.Unlock()
	fake.GetFlakyTestsStub = nil
	if fake.getFlakyTestsReturnsOnCall == nil {
		fake.getFlakyTestsReturnsOnCall = make(map[int]struct {
			result1 []*gql.FlakyTest
			result2 error
		})
	}
	fake.getFlakyTestsReturnsOnCall[i] = struct {
		result1 []*gql.FlakyTest
		result2 error
	}{result1, result2}
}

func (fake *FakeFlakyTestProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getFlakyTestsMutex.RLock()
	defer fake.getFlakyTestsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFlakyTestProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repo.FlakyTestProvider = new(FakeFlakyTestProvider)
